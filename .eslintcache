[{"/mnt/c/Users/eleet/projects/misc/tidings/src/containers/CardCreationContainer.js":"1","/mnt/c/Users/eleet/projects/misc/tidings/src/App.js":"2","/mnt/c/Users/eleet/projects/misc/tidings/src/index.js":"3","/mnt/c/Users/eleet/projects/misc/tidings/src/components/CardDestinationForm.js":"4","/mnt/c/Users/eleet/projects/misc/tidings/src/components/PaymentForm.js":"5","/mnt/c/Users/eleet/projects/misc/tidings/src/components/SearchInput.js":"6","/mnt/c/Users/eleet/projects/misc/tidings/src/components/ImageUploadForm.js":"7"},{"size":6018,"mtime":1608514038451,"results":"8","hashOfConfig":"9"},{"size":230,"mtime":1607895272901,"results":"10","hashOfConfig":"9"},{"size":148,"mtime":1608304738902,"results":"11","hashOfConfig":"9"},{"size":1519,"mtime":1608560354386,"results":"12","hashOfConfig":"9"},{"size":1072,"mtime":1608563591931,"results":"13","hashOfConfig":"9"},{"size":2123,"mtime":1608043306712,"results":"14","hashOfConfig":"9"},{"size":589,"mtime":1608562601039,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"qdf74k",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/eleet/projects/misc/tidings/src/containers/CardCreationContainer.js",["32"],"// main page for postcard image upload, destination setting, and payment\r\nimport React, { useState } from 'react'\r\nimport { geocodeByAddress } from 'react-places-autocomplete'\r\nimport ImageUploadForm from '../components/ImageUploadForm'\r\nimport CardDestinationForm from '../components/CardDestinationForm'\r\nimport PaymentForm from '../components/PaymentForm'\r\n\r\nexport default function CardCreationContainer() {\r\n\r\n  // declaring state variables for card destination details\r\n  const initialValues = { senderName: '', recipientName: '', address1: '', address2: '', zip: '' }\r\n  const [values, setValues] = useState(initialValues)\r\n  const [picture, setPicture] = useState(null) // state variable for user-uploaded image in browser\r\n  const [remotePicture, setRemotePicture] = useState(null) // state variable for user-uploaded image location in cloud storage\r\n\r\n  // callback function to update state variable holding user image\r\n  const handleUpload = event => {\r\n    setPicture(event)\r\n\r\n    // only need to store image on user upload, not removal\r\n    if (event.length !== 0) {\r\n      addImgToCloud()\r\n      // console.log(\"in handleUpload() after adding image to cloudinary\")\r\n    } else {\r\n      setRemotePicture(null)\r\n      // console.log(\"in handleUpload() after resetting remotePicture in state\")\r\n    }\r\n  }\r\n\r\n  // if available, grabbing the data URI for user's uploaded image file\r\n  const findImgLocation = () => {\r\n    if (document.querySelector(\".uploadPicture\")) {\r\n      const location = document.querySelector(\".uploadPicture\").getAttribute(\"src\")\r\n      return location\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // storing user's uploaded image using Cloudinary and updating state with its new URL\r\n  const addImgToCloud = () => {\r\n    const imgLocation = findImgLocation()\r\n\r\n    if (imgLocation) {\r\n      const payload = {\r\n        // formatting data URL properly before making request\r\n        file: `${imgLocation.split(';').filter(str => !str.includes(\"name=\") ).join(';')}`,\r\n        upload_preset: 'tidings'\r\n      }\r\n\r\n      const configObj = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)\r\n      }\r\n\r\n      fetch('https://cors-anywhere.herokuapp.com/https://api.Cloudinary.com/v1_1/df7waillu/image/upload', configObj)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            // updating state for image location in cloud storage with URL string from response\r\n            setRemotePicture(res.secure_url)\r\n          })\r\n        .catch(err => console.log(err))\r\n    } else {\r\n      console.log(\"can't find any user-uploaded image :(\")\r\n    }\r\n\r\n  }\r\n\r\n  // state hook for updating user's destination form inputs\r\n  const handleChange = event => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  // callback updating the address field and state variable\r\n  const handleAddressInputChange = addressStr => {\r\n    setValues({ ...values, address1: addressStr, zip: '' })\r\n  }\r\n\r\n  // callback updating address field and zip code state variable\r\n  const handleAddressInputSelect = addressStr => {\r\n    setValues({ ...values, address1: addressStr })\r\n    findZip(addressStr)\r\n  }\r\n\r\n  // state hook to update zip code\r\n  const findZip = addressStr => {\r\n    geocodeByAddress(addressStr)\r\n      .then(results => (results[0]))\r\n      .then(result => {\r\n        let zipCode = result.formatted_address.split(',').slice(-2, -1)[0].split(\" \").pop()\r\n        setValues({ ...values, zip: zipCode })\r\n      })\r\n      .catch(error => console.error('Error', error))\r\n  }\r\n\r\n  // tbd\r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n\r\n    let addressArr = values.address1.split(',').map(a => a.trim())\r\n    let addressee = {\r\n      name: values.recipientName,\r\n      address_line1: addressArr[0],\r\n      address_line2: values.address2,\r\n      address_city: addressArr[1],\r\n      address_state: addressArr[2],\r\n      address_zip: values.zip\r\n    }\r\n\r\n    testOutLob(addressee)\r\n  }\r\n\r\n  // using destination address inputs to create postcard with Lob API\r\n  // addressee = { name, address_line1, address_line2, address_city, address_state, address_zip }\r\n  const testOutLob = addressee => {\r\n    const Lob = require('lob')(process.env.REACT_APP_LOB_TEST_SECRET_KEY)\r\n\r\n    if (!remotePicture) {\r\n      console.log(\"It appears you've uploaded an invalid image. Please try again.\")\r\n    } else if ( addressee.address_zip.length === 0 && !Number.isInteger(parseFloat(addressee.address_line1)) ) {\r\n      console.log(\"It appears you've entered an invalid destination address. Please try again.\")\r\n    } else {\r\n      Lob.postcards.create({\r\n        to: addressee,\r\n        front: 'tmpl_fed93452925c5bf',\r\n        back: 'tmpl_f92a8a1d43eef0e',\r\n        merge_variables: {\r\n          name: values.senderName,\r\n          img: remotePicture\r\n        }\r\n      }, function(err, postcard) {\r\n          err ? console.log(err) : console.log(postcard)\r\n      })\r\n\r\n    }\r\n\r\n    // clear out state after form submission\r\n    // setValues(initialValues)\r\n    // setPicture(null)\r\n    // setRemotePicture(null)\r\n\r\n    // also will want to display some sort of confirmation + maybe SMS message?\r\n  }\r\n\r\n  return (\r\n    <div className=\"container  d-flex flex-column justify-content-center align-items-center  col-8 offset-2\">\r\n\r\n      <ImageUploadForm\r\n        handleUpload={handleUpload}\r\n      />\r\n      <br></br>\r\n\r\n      <CardDestinationForm\r\n        senderName={values.senderName}\r\n        recipientName={values.recipientName}\r\n        address1={values.address1}\r\n        address2={values.address2}\r\n        handleChange={handleChange}\r\n        handleAddressInputChange={handleAddressInputChange}\r\n        handleAddressInputSelect={handleAddressInputSelect}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n      <br></br>\r\n\r\n      <PaymentForm\r\n\r\n      />\r\n      <br></br>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n","/mnt/c/Users/eleet/projects/misc/tidings/src/App.js",[],["33","34"],"/mnt/c/Users/eleet/projects/misc/tidings/src/index.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/CardDestinationForm.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/PaymentForm.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/SearchInput.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/ImageUploadForm.js",[],{"ruleId":"35","severity":1,"message":"36","line":13,"column":10,"nodeType":"37","messageId":"38","endLine":13,"endColumn":17},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'picture' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]