[{"/mnt/c/Users/eleet/projects/misc/tidings/src/containers/CardCreationContainer.js":"1","/mnt/c/Users/eleet/projects/misc/tidings/src/components/ImageUploadForm.js":"2","/mnt/c/Users/eleet/projects/misc/tidings/src/App.js":"3","/mnt/c/Users/eleet/projects/misc/tidings/src/components/CardDestinationForm.js":"4","/mnt/c/Users/eleet/projects/misc/tidings/src/index.js":"5","/mnt/c/Users/eleet/projects/misc/tidings/src/components/PaymentForm.js":"6","/mnt/c/Users/eleet/projects/misc/tidings/src/components/SearchInput.js":"7"},{"size":4756,"mtime":1608304819904,"results":"8","hashOfConfig":"9"},{"size":586,"mtime":1608041931796,"results":"10","hashOfConfig":"9"},{"size":230,"mtime":1607895272901,"results":"11","hashOfConfig":"9"},{"size":1525,"mtime":1608043058509,"results":"12","hashOfConfig":"9"},{"size":148,"mtime":1608304738902,"results":"13","hashOfConfig":"9"},{"size":188,"mtime":1607734735206,"results":"14","hashOfConfig":"9"},{"size":2123,"mtime":1608043306712,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"qdf74k",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/eleet/projects/misc/tidings/src/containers/CardCreationContainer.js",["32"],"// main page for postcard image upload, destination setting, and payment\r\nimport React, { useState } from 'react'\r\nimport { geocodeByAddress } from 'react-places-autocomplete'\r\nimport ImageUploadForm from '../components/ImageUploadForm'\r\nimport CardDestinationForm from '../components/CardDestinationForm'\r\nimport PaymentForm from '../components/PaymentForm'\r\n\r\nexport default function CardCreationContainer() {\r\n\r\n  // declaring state variables for card destination details\r\n  const initialState = { senderName: '', recipientName: '', address1: '', address2: '', zip: '' }\r\n  const [values, setValues] = useState(initialState)\r\n  const [picture, setPicture] = useState(null) // state variable for user image\r\n\r\n  // callback function to update state variable holding user image\r\n  const handleUpload = event => {\r\n    setPicture(event)\r\n    findImgLocation()\r\n  }\r\n\r\n  // will eventually need to grab this image file's URL\r\n  const findImgLocation = imgLocation => {\r\n    if (document.querySelector(\".uploadPicture\")) {\r\n      const location = document.querySelector(\".uploadPicture\").getAttribute(\"src\")\r\n      console.log(location)\r\n\r\n      // will need to resize the img to fit Lob's postcard specs\r\n      // maybe use this React component: https://www.npmjs.com/package/react-image-file-resizer\r\n    }\r\n  }\r\n\r\n  // state hook for updating user's destination form inputs\r\n  const handleChange = event => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  // callback updating the address field and state variable\r\n  const handleAddressInputChange = addressStr => {\r\n    setValues({ ...values, address1: addressStr, zip: '' })\r\n  }\r\n\r\n  // callback updating address field and zip code state variable\r\n  const handleAddressInputSelect = addressStr => {\r\n    setValues({ ...values, address1: addressStr })\r\n    findZip(addressStr)\r\n  }\r\n\r\n  // state hook to update zip code\r\n  const findZip = addressStr => {\r\n    geocodeByAddress(addressStr)\r\n      .then(results => (results[0]))\r\n      .then(result => {\r\n        let zipCode = result.formatted_address.split(',').slice(-2, -1)[0].split(\" \").pop()\r\n        setValues({ ...values, zip: zipCode })\r\n      })\r\n      .catch(error => console.error('Error', error))\r\n  }\r\n\r\n  //\r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n\r\n    let addressArr = values.address1.split(',').map(a => a.trim())\r\n    let addressee = {\r\n      name: values.recipientName,\r\n      address_line1: addressArr[0],\r\n      address_line2: values.address2,\r\n      address_city: addressArr[1],\r\n      address_state: addressArr[2],\r\n      address_zip: values.zip\r\n    }\r\n    testOutLob(addressee)\r\n\r\n    // console.log(values.recipientName) // name\r\n    // if ( Number.isInteger(parseFloat(addressArr[0])) ) { console.log(addressArr[0]) } // address_line1\r\n    // if (values.address2.length !== 0) { console.log(values.address2) } // address_line2?\r\n    // console.log(addressArr[1]) // address_city\r\n    // console.log(addressArr[2]) // address_state\r\n    // console.log(values.zip) // address_zip -- need this from google autocomplete\r\n  }\r\n\r\n  // using destination address inputs to interact with the Lob API\r\n  // addressee = { name, address_line1, address_line2, address_city, address_state, address_zip }\r\n  const testOutLob = addressee => {\r\n    const Lob = require('lob')(process.env.REACT_APP_LOB_TEST_SECRET_KEY)\r\n\r\n    if ( addressee.address_zip.length !== 0 && Number.isInteger(parseFloat(addressee.address_line1)) ) {\r\n      Lob.addresses.create(addressee, function(err, address) {\r\n        console.log(err, address)\r\n      })\r\n    } else {\r\n      console.log('invalid address')\r\n    }\r\n\r\n\r\n    // Lob.postcards.create({\r\n    //   to: addressee,\r\n    //   front: tmpl_f92a8a1d43eef0e,\r\n    //   back: ,\r\n    //   merge_variables: {\r\n    //     name: values.senderName,\r\n    //     img:\r\n    //   }\r\n    // }, function(err, postcard) {\r\n    //     console.log(err, postcard)\r\n    // })\r\n\r\n    // setValues(initialState) // clear out form after submission\r\n  }\r\n\r\n  return (\r\n    <div className=\"container  d-flex flex-column justify-content-center align-items-center  col-8 offset-2\">\r\n      <ImageUploadForm\r\n        handleUpload={handleUpload}\r\n      />\r\n      <br></br>\r\n\r\n      <CardDestinationForm\r\n        senderName={values.senderName}\r\n        recipientName={values.recipientName}\r\n        address1={values.address1}\r\n        address2={values.address2}\r\n        handleChange={handleChange}\r\n        handleAddressInputChange={handleAddressInputChange}\r\n        handleAddressInputSelect={handleAddressInputSelect}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n      <br></br>\r\n\r\n      <PaymentForm\r\n\r\n      />\r\n      <br></br>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n","/mnt/c/Users/eleet/projects/misc/tidings/src/components/ImageUploadForm.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/App.js",[],["33","34"],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/CardDestinationForm.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/index.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/PaymentForm.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/SearchInput.js",[],{"ruleId":"35","severity":1,"message":"36","line":13,"column":10,"nodeType":"37","messageId":"38","endLine":13,"endColumn":17},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'picture' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]