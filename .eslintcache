[{"/mnt/c/Users/eleet/projects/misc/tidings/src/containers/CardCreationContainer.js":"1","/mnt/c/Users/eleet/projects/misc/tidings/src/App.js":"2","/mnt/c/Users/eleet/projects/misc/tidings/src/index.js":"3","/mnt/c/Users/eleet/projects/misc/tidings/src/components/CardDestinationForm.js":"4","/mnt/c/Users/eleet/projects/misc/tidings/src/components/SearchInput.js":"5","/mnt/c/Users/eleet/projects/misc/tidings/src/components/ImageUploadForm.js":"6","/mnt/c/Users/eleet/projects/misc/tidings/src/components/CheckoutCard.js":"7","/mnt/c/Users/eleet/projects/misc/tidings/src/components/Success.js":"8","/mnt/c/Users/eleet/projects/misc/tidings/src/components/Error.js":"9"},{"size":7461,"mtime":1608857060250,"results":"10","hashOfConfig":"11"},{"size":1358,"mtime":1608841309933,"results":"12","hashOfConfig":"11"},{"size":148,"mtime":1608304738902,"results":"13","hashOfConfig":"11"},{"size":1380,"mtime":1608755329196,"results":"14","hashOfConfig":"11"},{"size":2123,"mtime":1608043306712,"results":"15","hashOfConfig":"11"},{"size":551,"mtime":1608755337746,"results":"16","hashOfConfig":"11"},{"size":561,"mtime":1608755333610,"results":"17","hashOfConfig":"11"},{"size":1812,"mtime":1608857574588,"results":"18","hashOfConfig":"11"},{"size":1092,"mtime":1608857724933,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"qdf74k",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/eleet/projects/misc/tidings/src/containers/CardCreationContainer.js",["43","44"],"// main page for postcard image upload, destination setting, and checkout page redirect\r\nimport React, { useState, useEffect } from 'react'\r\nimport { geocodeByAddress } from 'react-places-autocomplete'\r\nimport { loadStripe } from '@stripe/stripe-js'\r\nimport ImageUploadForm from '../components/ImageUploadForm'\r\nimport CardDestinationForm from '../components/CardDestinationForm'\r\nimport CheckoutCard from '../components/CheckoutCard'\r\n\r\nconst Lob = require('lob')(process.env.REACT_APP_LOB_TEST_SECRET_KEY) // Lob object\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_LIVE_KEY) // Stripe object\r\n\r\nexport default function CardCreationContainer() {\r\n\r\n  // declaring state variables for card destination details\r\n  const initialValues = { senderName: '', recipientName: '', address1: '', address2: '', zip: '' }\r\n  const [values, setValues] = useState(initialValues)\r\n  const [remoteAddress, setRemoteAddress] = useState(null) // state variable for Lob-created address\r\n  const [picture, setPicture] = useState(null) // state variable for user-uploaded image in browser\r\n  const [remotePicture, setRemotePicture] = useState(null) // state variable for Cloudinary-hosted image location\r\n  const [checkoutDisabled, setCheckoutDisabled] = useState(null) // state variable for whether to disabled checkout button\r\n\r\n  // clearing out user's local storage on initial page load\r\n  useEffect(() => {\r\n    localStorage.clear()\r\n  }, [])\r\n\r\n  // add address to Lob address book once destination form fields are filled\r\n  useEffect(() => {\r\n    if ( !!values.senderName & !!values.recipientName && !!values.address1 && !!values.zip ) {\r\n      addAddressToLob()\r\n    } else {\r\n      setRemoteAddress(null)\r\n    }\r\n  }, [values])\r\n\r\n  // toggle checkout button access once stored image and address are both present\r\n  useEffect(() => {\r\n    if ( !!remotePicture && remoteAddress !== null ) {\r\n      setCheckoutDisabled(false)\r\n    } else {\r\n      setCheckoutDisabled(true)\r\n    }\r\n  }, [remoteAddress, remotePicture])\r\n\r\n  // callback function to update state variable holding user image\r\n  // only need to store image on user image upload, not removal\r\n  const handleUpload = event => {\r\n    setPicture(event)\r\n    event.length !== 0 ? addImgToCloud() : setRemotePicture(null)\r\n  }\r\n\r\n  // storing user's uploaded image using Cloudinary and updating state with its new URL\r\n  const addImgToCloud = () => {\r\n    const imgLocation = findImgLocation()\r\n\r\n    if (imgLocation) {\r\n      const payload = {\r\n        // formatting data URL properly before making request\r\n        file: `${imgLocation.split(';').filter(str => !str.includes(\"name=\") ).join(';')}`,\r\n        upload_preset: 'tidings'\r\n      }\r\n\r\n      const configObj = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)\r\n      }\r\n\r\n      fetch('https://cors-anywhere.herokuapp.com/https://api.Cloudinary.com/v1_1/df7waillu/image/upload', configObj)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            // updating state for image location in cloud storage with URL string from response\r\n            setRemotePicture(res.secure_url)\r\n          })\r\n        .catch(err => console.log(err))\r\n    } else {\r\n      console.log(\"can't find any user-uploaded image\")\r\n    }\r\n\r\n  } // end addImgToCloud()\r\n\r\n  // if available, grabbing the data URI for user's uploaded image file\r\n  const findImgLocation = () => {\r\n    if (document.querySelector(\".uploadPicture\")) {\r\n      return document.querySelector(\".uploadPicture\").getAttribute(\"src\")\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // state hook for updating user's destination form inputs\r\n  const handleChange = event => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  // callback updating address field and state variable\r\n  const handleAddressInputChange = addressStr => {\r\n    setValues({ ...values, address1: addressStr, zip: '' })\r\n  }\r\n\r\n  // callback updating address field and zip code state variable\r\n  const handleAddressInputSelect = addressStr => {\r\n    setValues({ ...values, address1: addressStr })\r\n    findZip(addressStr)\r\n  }\r\n\r\n  // state hook updating zip code\r\n  const findZip = addressStr => {\r\n    geocodeByAddress(addressStr)\r\n      .then(results => (results[0]))\r\n      .then(result => {\r\n        let zipCode = result.formatted_address.split(',').slice(-2, -1)[0].split(\" \").pop()\r\n        setValues({ ...values, zip: zipCode })\r\n      })\r\n      .catch(error => console.error('Error', error))\r\n  }\r\n\r\n  // adding an address to Lob address book with user inputted information\r\n  const addAddressToLob = () => {\r\n    let addressArr = values.address1.split(',').map(a => a.trim())\r\n\r\n    let addressee = {\r\n      name: values.recipientName,\r\n      address_line1: addressArr[0],\r\n      address_line2: values.address2,\r\n      address_city: addressArr[1],\r\n      address_state: addressArr[2],\r\n      address_zip: values.zip\r\n    }\r\n\r\n    // ensure user has selected a specific address, not just a town or city\r\n    // if so, add address to Lob address book and use response to set remoteAddress state variable\r\n    if ( !Number.isInteger(parseFloat(addressee.address_line1)) ) {\r\n      alert(\"You've entered an invalid destination address. Please try again.\")\r\n    } else {\r\n      Lob.addresses.create(addressee, (err, address) => {\r\n        if (err) {\r\n          alert(err)\r\n          setRemoteAddress(null)\r\n        } else {\r\n          setRemoteAddress(address.id)\r\n        }\r\n      })\r\n    }\r\n\r\n  } // end addAddressToLob()\r\n\r\n  // handling redirect to Stripe-hosted checkout page\r\n  const handleCheckout = async (event) => {\r\n    event.preventDefault()\r\n\r\n    // set local storage with info for sending postcard upon successful payment\r\n    localStorage.setItem('senderName', values.senderName )\r\n    localStorage.setItem('remotePicture', remotePicture )\r\n    localStorage.setItem('remoteAddress', remoteAddress )\r\n\r\n    // localStorage.setItem('senderName', 'e' )\r\n    // localStorage.setItem('remotePicture', 'e' )\r\n    // localStorage.setItem('remoteAddress', 'e' )\r\n\r\n    const stripe = await stripePromise\r\n\r\n    // redirect to success page upon successful payment, error page otherwise\r\n    const { error } = await stripe.redirectToCheckout({\r\n      lineItems: [{\r\n        price: 'price_1I0cm0BrGXf3SoO6zIFh9jvE',\r\n        quantity: 1,\r\n      }],\r\n      mode: 'payment',\r\n      successUrl: 'https://tidings-app.netlify.app/success',\r\n      cancelUrl: 'https://tidings-app.netlify.app/error',\r\n    })\r\n\r\n    if (error) {\r\n      alert(error.message)\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"container  d-flex flex-column justify-content-center align-items-center  col-8 offset-2\">\r\n\r\n      <ImageUploadForm\r\n        handleUpload={handleUpload}\r\n      />\r\n      <br></br>\r\n\r\n      <CardDestinationForm\r\n        senderName={values.senderName}\r\n        recipientName={values.recipientName}\r\n        address1={values.address1}\r\n        address2={values.address2}\r\n        handleChange={handleChange}\r\n        handleAddressInputChange={handleAddressInputChange}\r\n        handleAddressInputSelect={handleAddressInputSelect}\r\n      />\r\n      <br></br>\r\n\r\n      <CheckoutCard\r\n        handleCheckout={handleCheckout}\r\n        checkoutDisabled={checkoutDisabled}\r\n      />\r\n      <br></br>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n","/mnt/c/Users/eleet/projects/misc/tidings/src/App.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/index.js",[],["45","46"],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/CardDestinationForm.js",[],["47","48"],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/SearchInput.js",[],["49","50"],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/ImageUploadForm.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/CheckoutCard.js",[],["51","52"],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/Success.js",[],"/mnt/c/Users/eleet/projects/misc/tidings/src/components/Error.js",[],{"ruleId":"53","severity":1,"message":"54","line":18,"column":10,"nodeType":"55","messageId":"56","endLine":18,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":34,"column":6,"nodeType":"59","endLine":34,"endColumn":14,"suggestions":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"65"},{"ruleId":"63","replacedBy":"66"},{"ruleId":"61","replacedBy":"67"},{"ruleId":"63","replacedBy":"68"},{"ruleId":"61","replacedBy":"69"},{"ruleId":"63","replacedBy":"70"},"no-unused-vars","'picture' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'addAddressToLob'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],["72"],["73"],["72"],["73"],{"desc":"74","fix":"75"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [addAddressToLob, values]",{"range":"76","text":"77"},[1724,1732],"[addAddressToLob, values]"]